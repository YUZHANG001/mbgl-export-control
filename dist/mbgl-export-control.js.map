{"version":3,"file":"mbgl-export-control.js","sources":["../src/icons.js","../src/index.js"],"sourcesContent":["const Icons = {}\n\nIcons.loading = `\n  <svg style=\"width: 100%; height: 100%;\" width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" stroke=\"#fff\">\n    <g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(1 1)\" stroke-width=\"2\">\n      <circle cx=\"22\" cy=\"22\" r=\"6\" stroke-opacity=\"0\">\n        <animate attributeName=\"r\"\n              begin=\"1.5s\" dur=\"3s\"\n              values=\"6;22\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n        <animate attributeName=\"stroke-opacity\"\n              begin=\"1.5s\" dur=\"3s\"\n              values=\"1;0\" calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n        <animate attributeName=\"stroke-width\"\n              begin=\"1.5s\" dur=\"3s\"\n              values=\"2;0\" calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n      </circle>\n      <circle cx=\"22\" cy=\"22\" r=\"6\" stroke-opacity=\"0\">\n        <animate attributeName=\"r\"\n              begin=\"3s\" dur=\"3s\"\n              values=\"6;22\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n        <animate attributeName=\"stroke-opacity\"\n              begin=\"3s\" dur=\"3s\"\n              values=\"1;0\" calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n        <animate attributeName=\"stroke-width\"\n              begin=\"3s\" dur=\"3s\"\n              values=\"2;0\" calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n      </circle>\n      <circle cx=\"22\" cy=\"22\" r=\"8\">\n        <animate attributeName=\"r\"\n              begin=\"0s\" dur=\"1.5s\"\n              values=\"6;1;2;3;4;5;6\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n      </circle>\n    </g>\n  </svg>\n  `\n\n\nIcons.download = `\n  <svg height=\"19px\" viewBox=\"0 0 14 19\" width=\"14px\" xmlns=\"http://www.w3.org/2000/svg\">\n    <title/><desc/><defs/>\n    <g fill=\"none\" fill-rule=\"evenodd\" id=\"Page-1\" stroke=\"none\" stroke-width=\"1\">\n      <g fill=\"#000000\" id=\"Core\" transform=\"translate(-383.000000, -213.000000)\">\n        <g id=\"file-download\" transform=\"translate(383.000000, 213.500000)\">\n          <path d=\"M14,6 L10,6 L10,0 L4,0 L4,6 L0,6 L7,13 L14,6 L14,6 Z M0,15 L0,17 L14,17 L14,15 L0,15 L0,15 Z\" id=\"Shape\"/>\n        </g>\n      </g>\n    </g>\n  </svg>\n  `\n\nexport default Icons\n","import 'canvas-toBlob'\nimport FileSaver from 'file-saver'\nimport icons from './icons'\n\nclass ExportControl {\n\n  constructor(options = {}) {\n    this.options = Object.assign({\n        dpi: 300,\n        attribution: \"Â© OpenStreetMap Contributors\",\n        textFont: [],\n      }, options\n    )\n  }\n\n  onAdd(map) {\n    this.container = document.createElement('div')\n    this.container.className = 'mapboxgl-ctrl mapboxgl-ctrl-group'\n\n    const btn = document.createElement('button')\n    btn.className = 'mapboxgl-ctrl-icon mapbox-gl-download'\n    btn.type = \"button\"\n    btn.setAttribute(\"aria-label\", \"Download\")\n    btn.innerHTML = icons.download\n\n    this.container.appendChild(btn)\n\n    btn.addEventListener('click', () => {\n      const actualPixelRatio = window.devicePixelRatio;\n      Object.defineProperty(window, 'devicePixelRatio', {\n        get: () => this.options.dpi / 96\n      });\n\n      const _loading = this.loading()\n\n      const _container = document.createElement('div')\n      document.body.appendChild(_container)\n\n      const width = map.getContainer().offsetWidth\n      const height = map.getContainer().offsetHeight\n      const bottomRight = map.unproject([width, height]).toArray()\n\n      this.setStyles(_container, {\n        visibility: \"hidden\",\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        width: `${width}px`,\n        height: `${height}px`,\n      })\n\n      const _map = new mapboxgl.Map({\n        container: _container,\n        center: map.getCenter(),\n        zoom: map.getZoom(),\n        bearing: map.getBearing(),\n        pitch: map.getPitch(),\n        style: map.getStyle(),\n        hash: false,\n        preserveDrawingBuffer: true,\n        interactive: false,\n        attributionControl: false,\n      })\n\n      _map.once('load', () => {\n        const geojson = {\n          type: 'FeatureCollection',\n          features: [{\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: bottomRight\n            },\n            properties: {\n              text: this.options.attribution\n            }\n          }]\n        };\n\n        _map.addSource(\"attribution-for-image\", {\n          type: \"geojson\",\n          data: geojson\n        })\n\n        let textFont = []\n        if (this.options.textFont.length) {\n          textFont = this.options.textFont\n        } else {\n          const layers = map.getStyle().layers\n          for (let i = 0; i < layers.length; i++) {\n            try {\n              const fonts = map.getLayoutProperty(layers[i].id, 'text-font')\n              if (fonts && fonts.length) {\n                textFont = fonts\n                break;\n              }\n            } catch (e) {\n              // Nothing to do.\n            }\n          }\n        }\n\n        _map.addLayer({\n          \"id\": \"markers\",\n          \"type\": \"symbol\",\n          \"source\": \"attribution-for-image\",\n          \"paint\": {\n            \"text-color\": \"#000000\",\n            \"text-halo-color\": \"rgba(255, 255, 255, 1)\",\n            \"text-halo-width\": 2,\n          },\n          \"layout\": {\n            \"text-field\": \"{text}\",\n            \"text-font\": textFont,\n            \"text-size\": 18,\n            \"text-anchor\": \"bottom-right\",\n            \"text-max-width\": 28,\n            \"text-offset\": [-0.5, -0.5],\n            \"text-allow-overlap\": true,\n          }\n        });\n\n        setTimeout(() => {\n          _map.getCanvas().toBlob((blob) => {\n            FileSaver.saveAs(blob, `${_map.getCenter().toArray().join('-')}.png`)\n            _map.remove()\n            _container.parentNode.removeChild(_container)\n            _loading.parentNode.removeChild(_loading)\n            Object.defineProperty(window, 'devicePixelRatio', {\n              get: () => actualPixelRatio\n            });\n          })\n        }, 3000)\n      })\n    })\n\n    return this.container;\n  }\n\n  onRemove() {\n    this.container.parentNode.removeChild(this.container)\n  }\n\n  loading() {\n    const container = document.createElement('div')\n    document.body.appendChild(container)\n\n    this.setStyles(container, {\n      position: \"absolute\",\n      top: 0,\n      bottom: 0,\n      width: \"100%\",\n      backgroundColor: \"rgba(0, 0, 0, 0.6)\",\n      zIndex: 9999,\n    })\n\n    const icon = document.createElement('div')\n    icon.innerHTML = icons.loading\n\n    this.setStyles(icon, {\n      position: \"absolute\",\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      zIndex: 9999,\n      margin: \"auto\",\n      width: \"120px\",\n      height: \"120px\",\n    })\n\n    container.appendChild(icon)\n\n    return container;\n  }\n\n  setStyles(element, styles) {\n    for (const style in styles) {\n      element.style[style] = styles[style]\n    }\n  }\n}\n\nexport default ExportControl\n"],"names":["Icons","loading","ExportControl","options","this","Object","assign","onAdd","map","container","document","createElement","className","btn","type","setAttribute","innerHTML","icons","download","appendChild","addEventListener","const","actualPixelRatio","window","devicePixelRatio","defineProperty","dpi","_loading","_container","body","width","getContainer","offsetWidth","height","offsetHeight","bottomRight","unproject","toArray","setStyles","_map","mapboxgl","Map","center","getCenter","zoom","getZoom","bearing","getBearing","pitch","getPitch","style","getStyle","once","addSource","geometry","properties","text","attribution","let","textFont","length","layers","i","fonts","getLayoutProperty","id","e","addLayer","paint","layout","getCanvas","toBlob","blob","saveAs","join","remove","parentNode","removeChild","get","onRemove","icon","element","styles"],"mappings":"0GAAMA,GAENC,QAAgB,4pECEVC,EAEJ,SAAYC,sBACVC,KAAKD,QAAUE,OAAOC,YACb,gBACQ,4CAEZH,gBAIPI,eAAMC,mBACCC,UAAYC,SAASC,cAAc,OACxCP,KAAKK,UAAUG,UAAY,wCAErBC,EAAMH,SAASC,cAAc,UAqHnC,OApHAE,EAAID,UAAY,wCAChBC,EAAIC,KAAO,WACPC,aAAa,aAAc,YAC/BF,EAAIG,UAAYC,EAAMC,cAEjBT,UAAUU,YAAYN,GAE3BA,EAAIO,iBAAiB,mBACnBC,IAAMC,EAAmBC,OAAOC,iBAChCnB,OAAOoB,eAAeF,OAAQ,0CACjBnB,EAAKD,QAAQuB,IAAM,UAG1BC,EAAWvB,EAAKH,UAEhB2B,EAAalB,SAASC,cAAc,gBACjCkB,KAAKV,YAAYS,OAEpBE,EAAQtB,EAAIuB,eAAeC,YAC3BC,EAASzB,EAAIuB,eAAeG,aAC5BC,EAAc3B,EAAI4B,WAAWN,EAAOG,IAASI,UAEnDjC,EAAKkC,UAAUV,cACD,kBACF,eACL,SACG,EACRE,MAAUA,OACVG,OAAWA,aAGPM,EAAO,IAAIC,SAASC,eACbb,EACXc,OAAQlC,EAAImC,YACZC,KAAMpC,EAAIqC,UACVC,QAAStC,EAAIuC,aACbC,MAAOxC,EAAIyC,WACXC,MAAO1C,EAAI2C,iBACL,yBACiB,eACV,sBACO,IAGtBZ,EAAKa,KAAK,kBAeRb,EAAKc,UAAU,8BACP,qBAdA,oCAEE,UACNC,eACQ,oBACOnB,GAEfoB,YACEC,KAAMpD,EAAKD,QAAQsD,kBAUzBC,IAAIC,QACAvD,EAAKD,QAAQwD,SAASC,OACxBD,EAAWvD,EAAKD,QAAQwD,cAGxB,QADME,EAASrD,EAAI2C,WAAWU,OACrBC,EAAI,EAAGA,EAAID,EAAOD,OAAQE,IACjC,IACEzC,IAAM0C,EAAQvD,EAAIwD,kBAAkBH,EAAOC,GAAGG,GAAI,aAClD,GAAIF,GAASA,EAAMH,OAAQ,GACdG,EACX,aAEKG,MAMRC,aACG,eACE,gBACE,wBACVC,oBACgB,4BACK,2CACA,GAErBC,qBACgB,qBACDV,cACA,iBACE,gCACG,mBACD,IAAM,0BACD,6BAKnBW,YAAYC,gBAAQC,KACbC,OAAOD,EAASjC,EAAKI,YAAYN,UAAUqC,KAAK,aAC1DnC,EAAKoC,WACMC,WAAWC,YAAYjD,KACzBgD,WAAWC,YAAYlD,GAChCtB,OAAOoB,eAAeF,OAAQ,oBAC5BuD,sBAAWxD,QAGd,SAIAlB,KAAKK,uBAGdsE,oBACE3E,KAAKK,UAAUmE,WAAWC,YAAYzE,KAAKK,wBAG7CR,uBACQQ,EAAYC,SAASC,cAAc,gBAChCkB,KAAKV,YAAYV,GAE1BL,KAAKkC,UAAU7B,YACH,eACL,SACG,QACD,uBACU,4BACT,WAGJuE,EAAOtE,SAASC,cAAc,cACpCqE,EAAKhE,UAAYC,EAAMhB,QAEvBG,KAAKkC,UAAU0C,YACH,eACL,SACG,OACF,QACC,SACC,YACA,aACD,eACC,UAGVvE,EAAUU,YAAY6D,GAEfvE,eAGT6B,mBAAU2C,EAASC,GACjB,IAAK7D,IAAM6B,KAASgC,IACVhC,MAAMA,GAASgC,EAAOhC"}